restic-options: &restic-options
  repo: "/srv/restic/data"
  password-file: "/run/secrets/restic-password"

rclone-options: &rclone-options
  password-command: "cat /run/secrets/rclone-password"

commands:
  init:
    command:
      - /bin/true
    hooks:
      post:
        - /bin/sh
        - -c
        - |
          runr init-restic
          runr init-rclone

  init-restic:
    command:
      - restic
      - init
    options:
      <<: *restic-options

  init-rclone:
    command:
      - /bin/sh
      - -c
      - |
        # Rclone does not provide a non-interactive method to encrypt the configuration file via CLI. 
        # Therefore, the `expect` tool is used to automate the interactive encryption process.
        expect <<EOF
        spawn rclone config

        # Select "Set configuration password"
        expect "n/s/q>" { send "s\r" }

        # Select "Add Password"
        expect "a/q>" { send "a\r" }

        # Enter and confirm password
        expect "password:" { send "$(cat '/run/secrets/rclone-password')\r" }
        expect "password:" { send "$(cat '/run/secrets/rclone-password')\r" }

        # Quit to main menu
        expect "c/u/q>" { send "q\r" }

        # Quit the configuration
        expect "n/s/q>" { send "q\r" }

        # Exit expect
        expect eof
        EOF
